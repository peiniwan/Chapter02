apply plugin: 'com.android.application'
def bakPath = file("${buildDir}/bakApk/")

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.dodola.watchdogkiller"
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions { annotationProcessorOptions { includeCompileClasspath = true } }
        multiDexEnabled true
        //tinker分包规则
//        multiDexKeepProguard file("./tinker_multidexkeep.pro")
//        buildConfigField "String", "TINKER_ID", "\"${getTinkerIdValue()}\""


    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    android{
        signingConfigs {
            release {
                try {
                    storeFile file("release.keystore")
                    storePassword "testres"
                    keyAlias "testres"
                    keyPassword "testres"
                } catch (ex) {
                    throw new InvalidUserDataException(ex.toString())
                }
            }
        }

        buildTypes {
            release {
                minifyEnabled true
                signingConfig signingConfigs.release
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
            debug {
                debuggable true
                // {"kind":"error","text":"Expected [!]interface|@interface|class|enum","sources" 异常
                minifyEnabled false
                signingConfig signingConfigs.release
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    //可选，用于生成application类 provided不参与打包
    provided("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}"){changing=true}
    //tinker的核心库
    compile("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}"){changing=true}
    implementation "com.android.support:multidex:1.0.1"

}


ext {
    tinkerEnabled = true
    tinkerOldApkPath = "${bakPath}/watchDogKillerSample-debug-0522-21-47-17.apk"
//    tinkerID = "1.0"
    tinkerApplyMappingPath = "${bakPath}/"
    tinkerApplyResourcePath = "${bakPath}/watchDogKillerSample-debug-0522-21-47-17-R.txt"
}

def buildWithTinker() {
    return ext.tinkerEnabled;
}

def getOldApkPath() {
    return ext.tinkerOldApkPath
}

def getApplyMappingPath() {
    return ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return ext.tinkerApplyResourcePath
}

def getTinkerIdValue() {
//    return ext.tinkerID
    return "4534524"
}

if (buildWithTinker()) {
    //启用tinker
    apply plugin: 'com.tencent.tinker.patch'

    tinkerPatch {
        oldApk = getOldApkPath()//指定old  apk的路径
        ignoreWarning = true//是否忽略警告,false表示不忽略tinker的警告，有警告则中止文件的生成
        useSign = true//强制使用签名
        tinkerEnable = buildWithTinker()//指定是否启用tinker
        buildConfig {
            applyMapping = getApplyMappingPath()//指定old apk打包时所使用的混淆文件
            applyResourceMapping = getApplyResourceMappingPath()//指定old apk的资源文件
            tinkerId = getTinkerIdValue()//指定Tinker的id
            keepDexApply = false
        }
        dex {
            dexMode = "jar"
            //指定dex文件目录
            pattern = ["classes*.dex",
                       "assets/secondary-dex-?.jar"]
            loader = [
                    "com.dodola.watchdogkiller.MyTinkerApplication"//指定加载patch文件时用到的类
//                    "com.dodola.watchdogkiller.SimpleTinkerInApplicationLike"//指定加载patch文件时用到的类

            ]
        }
        lib {
            pattern = ["lib/*/*.so"]
        }
        res {
            pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]
//指定tinker可以修改的资源路径
            ignoreChange = ["assets/sample_meta.txt"]//指定不受影响的资源路径
            largeModSize = 100//资源修改的默认大小
        }
        packageConfig {
            configField("patchMessage", "tinker is sample to use")
            configField("platform", "all")//平台
            configField("patchVersion", "1.0")//版本号
        }
    }
    List<String> flavors = new ArrayList<>();
    project.android.productFlavors.each { flavor ->
        flavors.add(flavor.name)
    }
    boolean hasFlavors = flavors.size() > 0
    def date = new Date().format("MMdd-HH-mm-ss")

    /**
     * bak apk and mapping
     */
    android.applicationVariants.all { variant ->
        /**
         * task type, you want to bak
         */
        def taskName = variant.name

        tasks.all {
            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {

                it.doLast {
                    copy {
                        def fileNamePrefix = "${project.name}-${variant.baseName}"
                        def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"

                        def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath
                        from variant.outputs.first().outputFile
                        into destPath
                        rename { String fileName ->
                            fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                        }

                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                        }

                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                        }
                    }
                }
            }
        }
    }
}
